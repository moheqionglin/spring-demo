## 锁分类
    https://blog.csdn.net/qq_38462278/article/details/81976428

    偏向锁 VS 轻量级锁 VS 重量级锁 ：
            重量级锁： 涉及到用户态到内核态切换。 比如 jdk1.6前synchronized底层使用monitorenter和monitorexit， 更底层依赖操作系统Mutex Lock。 涉及到用户态到内核态切换。
            轻量级锁： 自旋锁和自适应自旋锁。 只在用户态，不涉及到内核态。
            偏向锁：  比轻量锁更高效的锁。  偏向的意思是，一个线程一旦获取偏向锁，那么后续该线程的所有操作不用再获取锁很高效。 但是只适合一个线程的情况。


## 锁升级
    所状态有 无锁->偏向锁->轻量级锁->重量级索

    synchronized在 1.6以后做了优化，
       默认偏向锁： 因为大部分情况下 如果程序只是一个thread在获取锁的话， 那么 偏向锁就够了（内部使用一次CAS操作）。 对象的头信息中会存放 偏向锁的threadID， 锁状态（是否加锁）， 锁类型（01是偏向锁， 00是轻量级锁）
       锁升级到轻量级锁：  如果此时有另外线程申请加锁。 那么锁自动升级为轻量级锁。 升级代价比较高，（在安全点停止所有thread->释放锁，并修改状态为为轻量级锁清空锁的threadid->将锁信息复制到当前线程栈中，同时指向堆中的锁。 ）
       升级重量级锁：  如果轻量级锁在自旋10次或者自适应自旋以后还没有得到锁，那么升级重量级锁，小勇操作系统的mutx lock。


https://www.cnblogs.com/paddix/p/5405678.html

## synchronized， lock区别
    区别
        > synchronized 悲观锁; lock 乐观锁CAS
        > JDK1.6前，JVM底层会编译为monitorenter和monitorexit。 但是监视器锁本质又是依赖于底层的操作系统的Mutex Lock来实现的。 但是涉及到用户态内核态切换，所以叫做 "重量级索"
        > synchronized 有异常自动退出， 但是lock必须在finally中释放锁，否则不释放。
        >


    相同
        > 可重入



## volatile 原理

## AtomicXXX 原理
CAS