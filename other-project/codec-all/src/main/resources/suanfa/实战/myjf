1mian：分布式架构 50分钟

> 个人介绍加项目介绍20分钟

> 微服务架构是什么，它的优缺点？

优点：
   架构上 去中心，预防单点故障。
   开发： 分小组
   部署： 灰度，蓝绿
   运维： 负载均衡。。


缺点 ：
    注册中心故障，
    分布式事务
    运维


> ACID CAP BASE理论  https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html
    ACID
            atomicity ： 事务保证
            Consistency ： undo和redo日志保证
            isolation ： READ UNCOMMIT（脏读）， READ COMMIT（解决脏读，不能解决重复读）， REQPEATE READ（解决重复读， 不能解决幻读）， SERIALIZE
            Durability： undo和redo日志保证
    CAP
           consistency：  四种： 完全一致行（无论任何时候连上集群人和机器都一致）> 单调一致性 > session 一致性(session级别单调一致性，但是session之间不保证) > 最终一致性
           availability：  每个操作必须可预期的相应结束
           partition tolerance分区容错（不一定完全解决，但要有考虑）： 即使单个组件不可用， 操作仍然可用

    BASE
          base available
          soft state
          eventually consistent （最终一致性）

> 分布式一致性协议，二段、三段、TCC，优缺点

     分布式一致性协议：
               二段、三段 ： 强一致性 + 牺牲部分可用性 （因为 为了强一致性， 其中一方如果失败，刘辉导致整个事务回滚， 影响此次请求。）
                           我们假设两阶段提交的过程中每一个数据库都具有99.9%的可用性，那么如果两阶段提交涉及到两个数据库，这个结果就是99.8%。根据系统可用性计算公式，假设每个月43200分钟，99.9%的可用性就是43157分钟, 99.8%的可用性就是43114分钟，相当于每个月的宕机时间增加了43分钟。
               TCC ： 弱一致性 + 高可用
               本地消息表：
               MQ事务消息：

         http://blog.jobbole.com/95632/
          2PC  3PC 本质上无法完全解决一致性问题。
     2PC： 比如 XA 两阶段：  preparecommit + commit https://blog.csdn.net/l1028386804/article/details/79769043
           参与者： Transaction Manager（协调者）， Resource Manager（数据库）， Resource 参与者（APP）
            牺牲可用性，换来强一致性（如果一个下单操作，10各服务前9都成功了，最后一个失败了，那么都回滚，太可惜了。）

         优点： 开发简单，事务一致性强。
         缺点： 四个问题
             1. 同步阻塞问题， 2pc 整个阶段都会阻塞资源。
             2. 单点故障：  第二阶段 TM挂了， 那么 RS会无限期 锁死资源。
             3. 不一致性:
                   3.1 第二阶段， TM给 RS1 发送完 commit 以后，挂了， 那么RS1 commit事务，但是 RS2 无法提交事务。
             4. TM给 RS1发送commit以后， TM 和 RS1都挂了， 那么即使 TM启动了也没用

      3PC： 把 第一阶段拆分两个阶段 + Resource Manager支持超时 自动commit提交。

           第三阶段：
              如果 TM挂了， 那么 ResourceManager 会 超时自动提交 commit事务（不是回滚。）

      问题：
          1. 如果第三阶段 TM给 RS1 RS2发送 abort回滚消息。 这时候 网络故障， RS1， RS2没收到TM abort指令， RM会超时自动commit。导致不一致。


     TCC： 牺牲数据一致性，换来可用性。   补偿事务
          try：     对业务系统做检测和资源预留冻结
          confirm： 远程调用A  B 系统， （try执行成功，并执行confirm的时候，默认confirm不会出错。 既： 只要try成功， confirm就一定成功）
          cancel：回滚，释放锁定资源。
       优点： 比2PC流程简单，吞吐量高。
       缺点： 第2，3步都有可能失败。 应用层实现补偿代码编写，提高系统复杂性。

     本地消息：
         思路： 分布式事务 转成 本机事务，
               fun createOrder(){
                    createOrder();
                    updateStock();
               }
               变成
               fun createOrder(){
                   begin tx：
                       createOrder();
                       写入库存预减表；
                   end tx；
                   sendKafka(updateStock);
              }
         然后定期查看 库存预见是否正常。

     优点 ： 避免分布式事务。

    MQ事务消息：
       类似于两阶段提交：
         思路
            fun createOrder(){
                try{
                    createOrder();
                    send(prepare_message);
                }finally{
                    send(commit_message);
                }
           }
          注意， rocketmq中 处于prepare状态的消息，其他系统是不可见的。 rocketmq会定期扫描prepare消息列表，问order service状态。 如果成功，那么

> RPC过程
    https://blog.csdn.net/liucan9035/article/details/73662426

> 服务注册中心宕机了怎么办？
> 微服务还有其他什么组件
      网关
      注册中心
      限流
      服务降级
      链路监控
      日志收集
      APM监控

> 分布式架构与微服务的关系 https://blog.csdn.net/qq_37788067/article/details/79250623
    分布式：  强调一个任务拆分10份子任务，然后交给不同机器的子节点执行。
             关注点： 分布式事务

    集群：    强调部署相同的应用， 10份相同任务，来了， 集群通过负载均衡均匀分配10份相同任务到节点上执行。
             关注点：session共享

    微服务：  分布式 + 集群。  比如
                下单流程 拆分成三个子任务。order-service + inventory-service + account-service。
                每个微服务， 都要部署多分。



你有什么问题要问我的。

2mian：1个小时

上来不用自我介绍，项目介绍，直接开始

算法来两道

各种排序算法、未排序常规数据查找第K大的数，时间复杂度。
二叉树的深度
操作系统来两道

虚拟内存分页了解不？
进程和线程区别？
数据库来三道

第一二三范式是什么？

一个表一千个列值为true和false，写sql 查询 有300个列值为true的行。
select id, col1 + col2 + col3 + col4 col from test where col1 + col2 + col3 + col4 = 3;

脏读和幻读是什么？

JVM

什么对象会从新生代晋升到老年代
    空间不够
    时间不够 超过15岁

多线程

一个任务分成十个任务，最后汇总计算，不能用fork/join
开源框架源码了解不？
数据建模两道、个人题开放性题
安全方面的问题

对安全方面了解多少？
安全协议有哪些 、https是啥？
介绍你做的项目和其中的难点。

3mian

个人感觉着重技术深度。

从ConcurrentHashMap一路问到锁&锁优化->LongAdder->伪共享->缓存行填充->cas等诸多技术细节；
从hystrix一路问到原理->自己如何实现->如何优化->响应流编程(reactive streams);
从简单的生产者消费者模式设计到如何高效健壮实现等等。
四面

如何倒序输出单向链表？
个人直接想法是用栈先进后出的特点，把链表数据读到栈里然后输出。
有更好的实现方式吗？
主要问项目情况，然后根据一个项目，问如果量级扩大1000倍，你会怎么做？有哪些优化措施？高性能&高可用措施？
五面：HR面

给大家抛出几大深坑问题：

个人的职业规划是什么
你遇到的最大问题或者是困难是什么
你如何看待阿里
你能为阿里带来什么
你的优缺点是什么
这几个问题，大家深思啊，不多说。

ms总结：

技术基础必须扎实：算法、数据结构、操作系统等，蚂蚁金服面试对技术的基础非常重视，基础扎实的同学有利于在前两轮突出重围。
技术宽度：主要集中在高并发、多线程、分布式架构，大以及常用中间件(缓存等)的选型和比较。
技术原理深入：重点还是提前准备好JVM、多线程高并发这块。
参与的项目总结：你需要清楚你所做项目的关键细节、优化、特点、原理。
很多所用第三方库&中间件等的原理，即使你不知道，也要有自己的想法能够说出如何代替实现，比如单点登录的替代方案。
最好，提前准备一个大数据访问，比如pv扩大1000倍，你的架构或者技术方案应对措施。
最后，千万不要倒在HR面试环节，避重就轻是重点，特别是优点和缺点，如果问到你的规划是什么，请记得一定告诉HR你想成为一名优秀的技术专家！